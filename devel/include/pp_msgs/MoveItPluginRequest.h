// Generated by gencpp from file pp_msgs/MoveItPluginRequest.msg
// DO NOT EDIT!


#ifndef PP_MSGS_MESSAGE_MOVEITPLUGINREQUEST_H
#define PP_MSGS_MESSAGE_MOVEITPLUGINREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pp_msgs
{
template <class ContainerAllocator>
struct MoveItPluginRequest_
{
  typedef MoveItPluginRequest_<ContainerAllocator> Type;

  MoveItPluginRequest_()
    : joint_names()
    , start_joint()
    , goal_joint()  {
    }
  MoveItPluginRequest_(const ContainerAllocator& _alloc)
    : joint_names(_alloc)
    , start_joint(_alloc)
    , goal_joint(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _start_joint_type;
  _start_joint_type start_joint;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_joint_type;
  _goal_joint_type goal_joint;





  typedef boost::shared_ptr< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveItPluginRequest_

typedef ::pp_msgs::MoveItPluginRequest_<std::allocator<void> > MoveItPluginRequest;

typedef boost::shared_ptr< ::pp_msgs::MoveItPluginRequest > MoveItPluginRequestPtr;
typedef boost::shared_ptr< ::pp_msgs::MoveItPluginRequest const> MoveItPluginRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator1> & lhs, const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_names == rhs.joint_names &&
    lhs.start_joint == rhs.start_joint &&
    lhs.goal_joint == rhs.goal_joint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator1> & lhs, const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b546eca51cee3831a0a21b77c2629df";
  }

  static const char* value(const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b546eca51cee383ULL;
  static const uint64_t static_value2 = 0x1a0a21b77c2629dfULL;
};

template<class ContainerAllocator>
struct DataType< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pp_msgs/MoveItPluginRequest";
  }

  static const char* value(const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] joint_names\n"
"float64[] start_joint\n"
"float64[] goal_joint\n"
;
  }

  static const char* value(const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_names);
      stream.next(m.start_joint);
      stream.next(m.goal_joint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveItPluginRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pp_msgs::MoveItPluginRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pp_msgs::MoveItPluginRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "start_joint[]" << std::endl;
    for (size_t i = 0; i < v.start_joint.size(); ++i)
    {
      s << indent << "  start_joint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start_joint[i]);
    }
    s << indent << "goal_joint[]" << std::endl;
    for (size_t i = 0; i < v.goal_joint.size(); ++i)
    {
      s << indent << "  goal_joint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_joint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PP_MSGS_MESSAGE_MOVEITPLUGINREQUEST_H
